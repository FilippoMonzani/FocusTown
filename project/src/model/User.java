// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package model;

import org.hibernate.Session;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import model.dbutil.SessionUtil;

/************************************************************/
/**
 * Represents a user of the application with a username and password.
 * This class allows operations such as saving, reading, updating, and deleting users in the database.
 * 
 * 
 * <p>This class is an entity that maps to the 'APP_USER' table in the database. 
 * It provides methods for CRUD (Create, Read, Update, Delete) operations using Hibernate ORM.</p>
 * 
 */
@Entity
@Table(name = "APP_USER")
public class User{

	@Id
	@Column(name = "username", nullable = false, updatable = false)
	private String username;
	@Column
	private String password;

	 /**
     * Default constructor required by Hibernate for entity mapping.
     */
	public User() {

	}

	 /**
     * Constructs a new user with the specified username and password.
     * 
     * @param username the username of the user
     * @param password the password of the user
     */
	public User(String username, String password) {
		this.username = username;
		this.password = password;
	}

	  /**
     * Gets the username of this user.
     * 
     * @return the username of the user
     */
	public String getUsername() {
		return username;
	}

	/**
     * Sets the username of this user.
     * 
     * @param username the username to set
     */
	public void setUsername(String username) {
		this.username = username;
	}

	 /**
     * Gets the password of this user.
     * 
     * @return the password of the user
     */
	public String getPassword() {
		return password;
	}

	 /**
     * Sets the password of this user.
     * 
     * @param password the password to set
     */
	public void setPassword(String password) {
		this.password = password;
	}
	
	/**
	 * Save this user in the database.
	 */
	public void save() {
		Session session = SessionUtil.startSession();
		session.persist(this);
		SessionUtil.endSession(session);
	}

	
	/**
	 * Read the user from the database that matches the username.
	 * @return The user, if the username matches, else returns null.
	 */
	public User read() {
		Session session = SessionUtil.startSession();
		User retrievedUser = session.find(User.class, this.getUsername());
		SessionUtil.endSession(session);
		return retrievedUser;
	}
	
	/**
	 * Update this user in the database.
	 */
	public void update() {
		Session session = SessionUtil.startSession();
		session.merge(this);
		SessionUtil.endSession(session);
	}
	
	/**
	 * Delete this user from the database.
	 */
	public void delete() {
		Session session = SessionUtil.startSession();
		session.remove(this);
		SessionUtil.endSession(session);
	}
}
