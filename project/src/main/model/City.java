// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package main.model;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.Session;

import main.controller.FocusApp;
import main.controller.TimeManager;
import main.model.dbutil.SessionUtil;

/**
 * Represents the collection of buildings belonging to a specific user.
 * <p>
 * The buildings are stored in a transient list after the login phase, 
 * while the building objects themselves are persistent entities in the database. 
 * This class provides methods to add new buildings to the database and load existing 
 * buildings for a user.
 * </p>
 * 
 * @author Sergio
 */
public class City {
	
	/**
     * A transient list containing buildings associated with the user.
     * <p>
     * This list holds the buildings in memory for the duration of the user's session.
     * </p>
     */
	private List<Building> buildings;
	public static final Logger logger = LogManager.getLogger(FocusApp.class);
	
	/**
     * Default constructor for the City class.
     * <p>
     * Initializes the `buildings` list as an empty list.
     * </p>
     */
	public City() {
		buildings = new ArrayList<Building>();
	}
	
	/**
     * Creates a new building with the specified characteristics, 
     * adds it to the transient list, and persists it in the database.
     * 
     * @param time The time spent on the study session, used to create a duration.
     * @param subject The subject that the user worked on during the study session (e.g., "Law", "English").
     * @param owner The user who owns the building.
     */
	public void addBuilding(TimeManager time, String subject, User owner) {
		Duration duration = Duration.ofSeconds(time.toSeconds());
		Building building = new Building(duration, subject, owner);
		building.save();
		buildings.add(building);
	}

	/**
     * Loads all buildings belonging to a specific user from the database
     * and adds them to the transient list. This method should be called 
     * after the login phase to initialize the city's building list.
     * <p>
     * This method retrieves buildings from the database and sets the password 
     * for each user, ensuring that the user's password is loaded alongside the buildings.
     * </p>
     * 
     * @param user The owner of the buildings to be loaded.
     */
	public void loadBuildings(User user) {
		buildings.clear();
		Session session = SessionUtil.startSession();
		// Query to retrieve all buildings associated with the user.
		List<Building> retrievedBuildings = session.createQuery("from Building b where b.owner = :owner_username", Building.class).setParameter("owner_username", user).list();
		// Retrieve the user's password.
		String password = session.createQuery("select u.password from User u where u.username = :owner_username", String.class).setParameter("owner_username", user.getUsername()).getSingleResult();
		// Set the password for each building's owner.
		for (Building b : retrievedBuildings) {
			b.getOwner().setPassword(password);
			buildings.add(b);
		}
		SessionUtil.endSession(session);
	}

	/**
     * Returns an unmodifiable view of the list of buildings.
     * <p>
     * This method provides access to the list of buildings while ensuring that
     * the list cannot be modified directly from outside the City class.
     * </p>
     * 
     * @return An unmodifiable list of buildings associated with the user.
     */
	public List<Building> getBuildings() {
		return Collections.unmodifiableList(buildings);
	}
}
