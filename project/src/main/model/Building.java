// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package main.model;

import java.time.Duration;
import java.time.LocalDateTime;

import org.hibernate.Session;
import org.hibernate.annotations.CreationTimestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import main.model.dbutil.SessionUtil;

/**
 * Represents a study session related to a specific building.
 * <p>
 * This entity is used to store information about study sessions, including the duration of the session,
 * the subject studied, the owner of the session, and the timestamp when the session ends.
 * </p>
 */
@Entity
@Table(name = "BUILDING")
public class Building{

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(name = "creation_time", nullable = false, updatable = false)
	@CreationTimestamp
	private LocalDateTime timeStamp; // timestamp of study session end

	@Column
	private Duration duration;

	@Column
	private String subject;

	@Convert(converter = UserConverter.class)
	private User owner;

	 /**
     * Default constructor for the Building class.
     * <p>
     * This constructor is used by Hibernate to create instances of the Building class.
     * </p>
     */
	public Building() {

	}

	 /**
     * Constructs a new Building instance with specified duration, subject, and owner.
     * 
     * @param duration The duration of the study session.
     * @param subject The subject being studied during the session.
     * @param owner The owner of the study session (User).
     */
	public Building(Duration duration, String subject, User owner) {
		super();
		this.duration = duration;
		this.subject = subject;
		this.owner = owner;
	}
	
	 /**
     * Constructs a new Building instance with specified duration, subject, owner, and timestamp.
     * 
     * @param duration The duration of the study session.
     * @param subject The subject being studied during the session.
     * @param owner The owner of the study session (User).
     * @param timestamp The timestamp when the study session ended.
     */
	public Building(Duration duration, String subject, User owner, LocalDateTime timestamp) {
		super();
		this.duration = duration;
		this.subject = subject;
		this.owner = owner;
		this.timeStamp = timestamp;
	}


	   /**
     * Gets the unique identifier of the building.
     * 
     * @return The ID of the building.
     */
	public Long getId() {
		return id;
	}


	 /**
     * Sets the unique identifier of the building.
     * 
     * @param id The ID to set for the building.
     */
	public void setId(Long id) {
		this.id = id;
	}

	/**
     * Gets the timestamp of when the study session ended.
     * 
     * @return The timestamp of the study session.
     */
	
	public LocalDateTime getTimeStamp() {
		return timeStamp;
	}

	/**
     * Sets the timestamp of when the study session ended.
     * 
     * @param timeStamp The timestamp to set for the study session.
     */
	public void setTimeStamp(LocalDateTime timeStamp) {
		this.timeStamp = timeStamp;
	}

	/**
     * Gets the duration of the study session.
     * 
     * @return The duration of the study session.
     */
	
	public Duration getDuration() {
		return duration;
	}

	 /**
     * Sets the duration of the study session.
     * 
     * @param duration The duration to set for the study session.
     */
	public void setDuration(Duration duration) {
		this.duration = duration;
	}

	 /**
     * Gets the subject being studied during the session.
     * 
     * @return The subject of the study session.
     */
	public String getSubject() {
		return subject;
	}

	/**
     * Sets the subject of the study session.
     * 
     * @param subject The subject to set for the study session.
     */
	public void setSubject(String subject) {
		this.subject = subject;
	}

	/**
     * Gets the owner of the study session.
     * 
     * @return The user who owns the study session.
     */
	public User getOwner() {
		return owner;
	}

	/**
     * Sets the owner of the study session.
     * 
     * @param owner The user to set as the owner of the study session.
     */
	public void setOwner(User owner) {
		this.owner = owner;
	}

	  /**
     * Saves the current Building object to the database.
     * <p>
     * This method starts a Hibernate session, persists the building entity, and ends the session.
     * </p>
     */
	public void save() {
		Session session = SessionUtil.startSession();
		session.persist(this);
		SessionUtil.endSession(session);
	}

	/**
     * Deletes the current Building object from the database.
     * <p>
     * This method starts a Hibernate session, removes the building entity, and ends the session.
     * </p>
     */
	public void delete() {
		Session session = SessionUtil.startSession();
		session.remove(this);
		SessionUtil.endSession(session);
	}
}
